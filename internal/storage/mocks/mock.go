// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "ozon-fintech/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbType is a mock of DbType interface.
type MockDbType struct {
	ctrl     *gomock.Controller
	recorder *MockDbTypeMockRecorder
}

// MockDbTypeMockRecorder is the mock recorder for MockDbType.
type MockDbTypeMockRecorder struct {
	mock *MockDbType
}

// NewMockDbType creates a new mock instance.
func NewMockDbType(ctrl *gomock.Controller) *MockDbType {
	mock := &MockDbType{ctrl: ctrl}
	mock.recorder = &MockDbTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbType) EXPECT() *MockDbTypeMockRecorder {
	return m.recorder
}

// GetFullURL mocks base method.
func (m *MockDbType) GetFullURL(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockDbTypeMockRecorder) GetFullURL(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockDbType)(nil).GetFullURL), shortUrl)
}

// LoadShortURL mocks base method.
func (m *MockDbType) LoadShortURL(link models.Link) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadShortURL", link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadShortURL indicates an expected call of LoadShortURL.
func (mr *MockDbTypeMockRecorder) LoadShortURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadShortURL", reflect.TypeOf((*MockDbType)(nil).LoadShortURL), link)
}

// Stop mocks base method.
func (m *MockDbType) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDbTypeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDbType)(nil).Stop))
}
